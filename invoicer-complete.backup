<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Invoicer - Get Paid With React</title>
  </head>
  <body>

    <div id="content">
    </div>

    <link rel="stylesheet" href="css/invoicer.css">

    <script src="lib/react.js"></script>
    <script src="lib/react-dom.js"></script>
    <script src="lib/browser.js"></script>

    <script type="text/babel" >

      function defVal(nullable, defaultVal){
        return nullable ? nullable : defaultVal;
      }

      function mk2dec(num){
          return parseFloat(num).toFixed(2)
      }

      var Store = {

        setValue: function(key, value) {
          localStorage.setItem(key, JSON.stringify(value));
        },

        getValue: function(key) {
          return JSON.parse(localStorage.getItem(key));
        },
      };

      var ShowHideMixin = {
        NEWITEM: "new-item",
        DELROW: "delRow",

        showNew: function(){
          this.setState({ showNew: true });
        },

        hideNew: function(e){
          var toEvt = e.toElement || e.relatedTarget;
          if( !toEvt ||
              this.state.addingNew || 
              toEvt.className.indexOf(this.NEWITEM) >= 0 ){

            return;
          }

          this.setState({ showNew: false });
        },

        showX: function(e, idx){
          this.setState({ hoverLine: idx,
                          showX: true });
        },
        
        exitRow: function(e){
          var evt = e.toElement || e.relatedTarget;
          if( !evt || evt.className.indexOf(this.DELROW) >= 0 ){
            return;
          }
          this.setState({ showX: false });
        },

      };

      var InvoiceIdentity = React.createClass({
        render: function(){
          return (
            <div className="invoiceIdentity">
              <h1>Invoice</h1>
            </div>
          );
        }
      });

      var InvoiceMeta = React.createClass({

        BUSNAME: "business-name",
        ISSUEDATE: "issue-date",
        DUEDATE: "due-date",
        INVNO: "inv-no",
        PONO: "po-no",

        getInitialState: function(){
          return {
            businessName: Store.getValue(this.BUSNAME),
            issueDate: Store.getValue(this.ISSUEDATE),
            dueDate: Store.getValue(this.DUEDATE),
            invoiceNo: Store.getValue(this.INVNO),
            poNo: Store.getValue(this.PONO),
          };
        },

        setBusinessName: function(e) {
          this.setState({businessName: e.target.value});
          Store.setValue(this.BUSNAME, e.target.value);
        },

        setIssueDate: function(e) {
          this.setState({issueDate: e.target.value});
          Store.setValue(this.ISSUEDATE, e.target.value);
        },

        setDueDate: function(e) {
          this.setState({dueDate: e.target.value});
          Store.setValue(this.DUEDATE, e.target.value);
        },

        setInvoiceNo: function(e) {
          this.setState({invoiceNo: e.target.value});
          Store.setValue(this.INVNO, e.target.value);
        },

        setPoNo: function(e) {
          this.setState({poNo: e.target.value});
          Store.setValue(this.PONO, e.target.value);
        },

        render: function(){
          return (
            <div className="invoiceMeta editGroup">
              <input type="text" className="businessName"
                    value={this.state.businessName}
                    onChange={this.setBusinessName} />
              <label>Issue Date: <input type="text"
                                        placeholder="DD.MM.YYYY"
                                        value={this.state.issueDate}
                                        onChange={this.setIssueDate} /></label>

              <label>Due Date: <input type="text" 
                                        placeholder="DD.MM.YYYY"
                                        value={this.state.dueDate}
                                        onChange={this.setDueDate} /></label>

              <label>Invoice #: <input type="text" 
                                        placeholder="YYYY-nnnn"
                                        value={this.state.invoiceNo}
                                        onChange={this.setInvoiceNo} /></label>

              <label>P.O. #: <input type="text"
                                    placeholder="#nnnnnnn"
                                    value={this.state.poNo}
                                    onChange={this.setPoNo} /></label>
            </div>
          );
        }
      });

      var ClientInfo = React.createClass({
        CLIENT_NAME: "client-name",
        ADDR_ONE: "addr-one",
        ADDR_TWO: "addr-two",
        PHONE_NO: "phone-no",
        EMAIL: "email",
        ATTN: "attn",

        getInitialState: function(){
          return {
            clientName: Store.getValue(this.CLIENT_NAME),
            address1: Store.getValue(this.ADDR_ONE),
            address2: Store.getValue(this.ADDR_TWO),
            phoneNo: Store.getValue(this.PHONE_NO),
            email: Store.getValue(this.EMAIL), 
            attn: Store.getValue(this.ATTN), 
            showControls: false,
          };
        },

        handleClientNameUpdate(e){
          var newName = e.target.value;
          this.setState({clientName: newName});
          Store.setValue(this.clientPrefix(this.CLIENT_NAME), newName);
        },

        handleAddrLine1Update(e){
          this.setState({address1: e.target.value});
          Store.setValue(this.clientPrefix(this.ADDR_ONE), e.target.value);
        },

        handleAddrLine2Update(e){
          this.setState({address2: e.target.value});
          Store.setValue(this.clientPrefix(this.ADDR_TWO), e.target.value);
        },

        handlePhoneUpdate(e){
          this.setState({phoneNo: e.target.value});
          Store.setValue(this.clientPrefix(this.PHONE_NO), e.target.value);
        },

        handleEmailUpdate(e){
          this.setState({email: e.target.value});
          Store.setValue(this.clientPrefix(this.EMAIL), e.target.value);
        },

        handleAttnUpdate(e){
          this.setState({attn: e.target.value});
          Store.setValue(this.clientPrefix(this.ATTN), e.target.value);
        },

        hideControls(e){
          var toEvt = e.toElement || e.relatedTarget;
          if( !toEvt || toEvt.className.indexOf("clientControl") >= 0 ){
            return;
          }

          this.setState({showControls: false});
        },

        render: function(){
          return (
            <div className="clientInfo editGroup">

              <div id="billto"><strong>Bill to:</strong></div>

              <input id="compayName" type="text" placeholder="Client/Company Name"
                value={this.state.clientName}  onChange={this.handleClientNameUpdate}
              />

              <input id="address1" type="text" placeholder="Address Line 1"
                value={this.state.address1}  onChange={this.handleAddrLine1Update}
                />

              <input id="address2" type="text" placeholder="Address Line 2"
                value={this.state.address2} onChange={this.handleAddrLine2Update}
              />

              <input id="phone" type="text" placeholder='5-555-555-5555'
                value={this.state.phoneNo} onChange={this.handlePhoneUpdate}
              />

              <input id="email" type="text" placeholder='client@clientdomain.com'
                value={this.state.email} onChange={this.handleEmailUpdate}
              />

              <input id="attn" type="text" placeholder='attn:Purchasing Officer'
                value={this.state.attn} onChange={this.handleAttnUpdate}
              />
            </div>
          );
        }
      });

      var PaymentInfo = React.createClass({
        mixins: [ShowHideMixin],

        PAYMENT_INFO: "payment_info",

        getInitialState: function(){
          var storedPaymentMethods = JSON.parse(Store.getValue(this.PAYMENT_INFO));
          return {
            showNew: false,
            addingNew: false,
            newPaymentMethod: '',
            paymentMethods: defVal(storedPaymentMethods, []),
            hoverLine: 0,
            showX: false,
          };
        },

        updateNewPaymentMethod: function(e){
          this.setState({addingNew: true});
          this.setState({newPaymentMethod: e.target.value});
        },

        addPaymentMethod: function(e){

          if( this.state.newPaymentMethod === "" ){
            return;
          }

          this.setState({showNew: false,
                         addingNew: false,
                         newPaymentMethod: ''});

          var paymentMethodsCopy = this.state.paymentMethods.slice();
          paymentMethodsCopy.push(this.state.newPaymentMethod);
          this.setState({ paymentMethods: paymentMethodsCopy });

          this.savePaymentMethods(paymentMethodsCopy);
        },

        deleteLine: function(idx){
          var pmsCopy = this.state.paymentMethods.slice();
          var pmsPre = pmsCopy.slice(0,idx);
          var pmsFinal = pmsPre.concat(pmsCopy.slice(idx+1));

          this.setState({paymentMethods: pmsFinal});
          this.savePaymentMethods(pmsFinal);
        },

        updatePaymentMethods: function(e, idx){
          var paymentMethodsCopy = this.state.paymentMethods.slice();
          paymentMethodsCopy[idx] = e.target.value;
          this.setState({ paymentMethods: paymentMethodsCopy });

          this.savePaymentMethods(paymentMethodsCopy);
        },

        savePaymentMethods: function(paymentMethods){
          Store.setValue(this.PAYMENT_INFO, JSON.stringify(paymentMethods));
        },

        render: function(){
          var displayPaymentMethod = 
                (function(pm, idx){
                  return <div className="pmLine" key={idx} id={"pmline"+idx}
                              onMouseOver={this.showX.bind(this, event, idx)}
                              onMouseOut={this.exitRow} >

                            <input type="text" id={"pay"+idx}
                              value={this.state.paymentMethods[idx]}
                              onChange={this.updatePaymentMethods.bind(this, event, idx)}/>

                            { this.state.showX && idx == this.state.hoverLine  ?
                                <div className={ShowHideMixin.DELROW}
                                     onClick={this.deleteLine.bind(this, idx)}>X</div>
                              : null
                            }
                        </div>
                }).bind(this);

          return (
            <div className="paymentInfo editGroup"
                 onMouseOver={this.showNew}
                 onMouseOut={this.hideNew}>

              <div><strong>Payment details:</strong></div>

              {this.state.paymentMethods.map(displayPaymentMethod)}

              {this.state.showNew || this.state.paymentMethods.length == 0 ?
                  <input  className={ShowHideMixin.NEWITEM}
                          type="text"
                          placeholder="Add payment method"
                          onChange={this.updateNewPaymentMethod}
                          onBlur={this.addPaymentMethod}
                          />
                  : null
              }
            </div>
          );
        }
      });

      var PayeeContact = React.createClass({
        getInitialState: function(){
          return {
            address1: null,
            address2: null,
            phone: null,
            web: null,
            email: null,
          };
        },

        render: function() {
          return(
            <div className="payeeContact">
              <input type="text" placeholder="Address 1"
                                  value={this.state.address1}/>
              <input type="text" placeholder="Address 2"
                                  value={this.state.address2}/>
              <input type="text" placeholder="5-555-555-5555"
                                  value={this.state.phone}/>
              <input type="text" placeholder="www.example.com"
                                  value={this.state.web}/>
              <input type="text" placeholder="contractor@example.com"
                                  value={this.state.email}/>
            </div>
          );
        }
      });

      var ThankyouNote = React.createClass({
        render: function() {
          return (
            <div className="thankyouNote">
              Thank you!
              <div>We appreciate your business and it's</div>
              <div>been a pleasure working with you.</div>
            </div>
          );
        }
      });

      var Footer = React.createClass({
        render: function() {
          return(
            <div className="footer">
              <PayeeContact />
              <ThankyouNote />
            </div>
          );
        }
      });

      var LineItem = React.createClass({
        mixins: [ShowHideMixin],

        getDefaultProps: function(){
          return {
            itemType:            "",
            lineItemId:       0,
            initialItem:      null,
            initialRate:      0,
            initialQty:       0,
          }
        },

        getInitialState: function(){
          return {
            // See http://bit.ly/1RYmInF for non anti-pattern use of
            // props in getInitialState.
            item:       this.props.initialItem,
            rate:       this.props.initialRate,
            qty:        mk2dec(this.props.initialQty),
            showX:      false,
            addingNew:  false,
          };
        },

        componentWillReceiveProps: function(nextProps){
          this.setState({
            item:       nextProps.initialItem,
            rate:       nextProps.initialRate,
            qty:        nextProps.initialQty,
          });
        },

        updateItem: function(e){
          var litem = e.target.value;
          if( litem ){
            this.setState({ item: litem });
            this.props.updateItemFn(this.props.lineItemId, 'item', litem);
          }
        },
        
        updateRate: function(e){
          var lrate = e.target.value;
          if( lrate ){
            this.setState({ rate: lrate });
            this.props.updateItemFn(this.props.lineItemId, 'rate', lrate);
          }
        },

        updateQty: function(e){
          var lqty = e.target.value;
          if( lqty ){
            this.setState({ qty: lqty });
            this.props.updateItemFn(this.props.lineItemId, 'qty', lqty);
          }
        },

        deleteLine: function(){
          this.props.delFn(this.props.lineItemId);
        },

        render: function(){
          return (
            <div className="lineItem"
                 onMouseOver={this.showX.bind(this,event,this.props.lineItemId)}
                 onMouseOut={this.exitRow} >
              <input 
                    className={this.props.itemType + " item"} type="text"
                    placeholder="New item" value={this.state.item}
                    onChange={this.updateItem} />

              <input className={this.props.itemType + " rate numeric"} type="text"
                    placeholder="0.00" value={this.state.rate}
                    onChange={this.updateRate} />

              <input className={this.props.itemType + " qty numeric"} type="text"
                    placeholder="0.00" value={this.state.qty}
                    onChange={this.updateQty} />

              <span className={this.props.itemType + " total numeric"} >
                    {mk2dec(this.state.rate * this.state.qty)}
              </span>

              { this.state.showX  ?
                    <div className={ShowHideMixin.DELROW}
                          onClick={this.deleteLine}>X</div>
                  : null }

            </div>
          );
        }
      });

      var LineItems = React.createClass({
        mixins: [ShowHideMixin],

        STORE_DATA: "LineItems",
        
        getInitialState: function(){
          var storeLineItems = Store.getValue(this.STORE_DATA);
          var emptyLi = [this.nullLineItem()];
          return {
            showNew: false,
            lineItems: !storeLineItems ? emptyLi : storeLineItems,
          };
        },

        nullLineItem: function(){
            return {item: null, rate:0, qty:0};
        },

        updateLineItemValue: function(itemId, field, value){
          var liCopy = this.state.lineItems.slice();

          liCopy[itemId][field]=value;

          if( itemId == liCopy.length-1 ){
            liCopy.push(this.nullLineItem());
          }

          this.setState({lineItems: liCopy});
          this.saveLineItems(liCopy);
        },

        deleteLineItem:function(itemId){

          if (this.state.lineItems.length == 1){
            var lineItemsFinal = [this.nullLineItem()];
          }
          else {
            var lineItemsCopy = this.state.lineItems.slice();
            var lineItemsPre = lineItemsCopy.slice(0,itemId);
            var lineItemsFinal = lineItemsPre.concat(lineItemsCopy.slice(itemId+1));
          }

          this.setState({lineItems: lineItemsFinal});
          this.saveLineItems(lineItemsFinal);
        },

        saveLineItems: function(lineItems){
          Store.setValue(this.STORE_DATA, lineItems);
        },

        render: function(){
          var liCount = this.state.lineItems.length;
          return (
            <div className="lineItems " >
              <div className="editGroup"
                    onMouseOver={this.showNew}
                    onMouseOut={this.hideNew} >

                <span className="item heading">Item</span>
                <span className="rate heading">Rate($)</span>
                <span className="qty heading">Qty</span>
                <span className="total heading">Total($)</span>
                {
                  this.state.lineItems.map((function(lineItem, idx){
                    var maxIdx = this.state.lineItems.length-1;

                    if( idx < maxIdx || maxIdx == 0 ){
                      return <LineItem
                                lineItemId={idx}
                                initialItem={lineItem.item}
                                initialRate={lineItem.rate}
                                initialQty={lineItem.qty}
                                updateItemFn={this.updateLineItemValue}
                                delFn={this.deleteLineItem}
                                key={idx} />
                    }

                    if( idx == maxIdx && this.state.showNew ){
                      return <LineItem
                              itemType={ShowHideMixin.NEWITEM}
                              lineItemId={idx}
                              updateItemFn={this.updateLineItemValue}
                              key={idx} />
                    }

                  }).bind(this))
                }

              </div>
              <Totals lineItems={this.state.lineItems} />
            </div>
          );
        }
      });

      var Totals = React.createClass({

        DATA_STORE_TAX: "invoice-tax",

        getInitialState: function(){
          var storedTax = Store.getValue(this.DATA_STORE_TAX);
          return {
            subtotal: 0.00,
            tax: storedTax ? storedTax : 0.00,
            total: 0.00,
          };
        },

        componentWillMount: function(){
          this.setState({ subtotal: mk2dec(this.state.subtotal) });
          this.setState({ tax: mk2dec(this.state.tax) });
          this.setState({ total: mk2dec(this.state.total) });
        },


        componentWillReceiveProps: function(nextProps){
          this.setState({subtotal: mk2dec(this.calcSubTotal())});
          this.setState({total: mk2dec(this.calcTotal(this.state.tax))});
        },

        handleTaxChange: function(e){
          var ltax = e.target.value;
          this.setState({tax: ltax});
          this.setState({total: mk2dec(this.calcTotal(ltax))});
          this.saveTax(ltax);
        },

        formatTax: function(e){
          this.setState({ tax: mk2dec(e.target.value) });
        },

        calcTotal: function(tax){
          var lsub = this.calcSubTotal();
          return mk2dec(lsub + (lsub * (tax / 100.0)));
        },

        calcSubTotal: function(){
          var lsub = 0;
          this.props.lineItems.map((function(lineItem, idx){
            lsub += (lineItem.rate * lineItem.qty);
          }));

          return lsub;
        },

        saveTax(tax) {
          Store.setValue(this.DATA_STORE_TAX, tax);
        },

        render: function() {

          return (
            <div className="totals">
            
              <div className="totalLabel">Sub-total:</div>
                <span className="subtotal totalValue numeric">
                  {mk2dec(this.calcSubTotal())}</span>

              <div className="totalLabel">Tax:</div>
                  <input className="tax numeric" type="text" placeholder="0"
                         value={this.state.tax} onChange={this.handleTaxChange} 
                                                onBlur={this.formatTax} />
                  <span>%</span>
              <div className="totalLabel finalTotal">Total:</div>
                <span className="totalValue finalTotal numeric">
                  {mk2dec(this.calcTotal(this.state.tax))}</span>
            </div>
          );

        },
      });

      var Invoice = React.createClass({

        render: function() {
          return(
            <div>
              <InvoiceIdentity />
              <InvoiceMeta />
              <PaymentInfo />
              <ClientInfo />
              <LineItems />
              <Footer />
            </div>
          );
        }
      });

      ReactDOM.render(
        <Invoice />,
        document.getElementById("content")
);
    
    </script>

  </body>
</html>
