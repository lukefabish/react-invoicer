import React from 'react';
import ReactDOM from 'react-dom';

const InvoiceIdentity = function invoiceIdentity() {
  return (
    <div className="invoiceIdentity">
      <h1>Invoice</h1>
    </div>);
};

class InvoiceMeta extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      bizName: 'Business Name',
    };
  }

  handleBizChange(e) {
    this.setState({ bizName: e.target.value });
  }

  render() {
    return (
      <div className="invoiceMeta">
        <form id="invoiceMetaForm">
          <input
            htmlFor="invoiceMetaForm"
            type="text"
            className="businessName"
            onChange={this.handleBizChange}
          />
          <label htmlFor="issueDate">Issue Date: </label>
          <input id="issueDate" htmlFor="invoiceMetaForm" type="text" placeholder="DD.MM.YYYY" />
          <label htmlFor="dueDate">Due Date: </label>
          <input id="dueDate" htmlFor="invoiceMetaForm" type="text" placeholder="DD.MM.YYYY" />
          <label htmlFor="invoiceNo">Invoice #: </label>
          <input id="invoiceNo" htmlFor="invoiceMetaForm" type="text" placeholder="YYYY-nnnn" />
          <label htmlFor="po">P.O. #: </label>
          <input id="po" htmlFor="invoiceMetaForm" type="text" placeholder="#nnnnnnnnn" />
        </form>
      </div>
    );
  }
}

const PaymentInfo = function paymentInfo() {
  return (
    <div className="paymentInfo">
      <div><strong>Payment:</strong></div>
      <form id="paymentInfo">
        <input htmlFor="paymentInfo" type="text" placeholder="Add payment method" />
      </form>
    </div>
  );
};

const ClientInfo = function clientInfo() {
  return (
    <div className="clientInfo">
      <div id="billTo"><strong>Bill To:</strong></div>
      <form id="clientInfoForm">
        <input
          htmlFor="clientInfoForm"
          type="text" id="companyName"
          placeholder="Client/Company Name"
        />
        <input
          htmlFor="clientInfoForm"
          type="text"
          id="address1"
          placeholder="Address 1"
        />
        <input
          htmlFor="clientInfoForm"
          type="text"
          id="address2"
          placeholder="Address 2"
        />
        <input
          htmlFor="clientInfoForm"
          type="text"
          id="phone"
          placeholder="555-5555-5555"
        />
        <input
          htmlFor="clientInfoForm"
          type="text"
          id="email"
          placeholder="client@example.com"
        />
        <input
          htmlFor="clientInfoForm"
          type="text"
          id="attn"
          placeholder="attn:Purchasing Officer"
        />
      </form>
    </div>
  );
};

class LineItems extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      showNew: false,
      lineItems: [{ item: '', rate: 0, qty: 0 }],
    };

    this.showNew = this.showNew.bind(this);
    this.hideNew = this.hideNew.bind(this);
    this.updateLineItem = this.updateLineItem.bind(this);
    this.deleteLineItem = this.deleteLineItem.bind(this);
    this.emitLineItem = this.emitLineItem.bind(this);
  }

  updateLineItem(idx, field, value) {
    const liCopy = this.state.lineItems.slice();
    liCopy[idx][field] = value;

    if (idx === this.state.lineItems.length - 1) {
      liCopy.push([{ item: '', rate: 0, qty: 0 }]);
    }

    this.setState({ lineItems: liCopy });
  }

  deleteLineItem(idx) {
    let finalLi;
    if (this.state.lineItems.length === 1) {
      finalLi = [];
      finalLi[0] = { item: '', rate: 0, qty: 0 };
    } else {
      const liCopyPre = this.state.lineItems.slice(0, idx);
      const liCopyPost = this.state.lineItems.slice(idx + 1);
      finalLi = liCopyPre.concat(liCopyPost);
    }

    this.setState({ lineItems: finalLi });
  }

  showNew() {
    this.setState({ showNew: true });
  }

  hideNew(e) {
    const ele = e.toElement || e.relatedTarget;
    if (!ele || ele.className.indexOf('liData') >= 0) {
      return;
    }

    this.setState({ showNew: false });
  }

  emitLineItem(lineItem, idx) {
    const maxIdx = this.state.lineItems.length - 1;

    if (idx < maxIdx) {
      return (
        <LineItem
          key={idx}
          idx={idx}
          item={lineItem.item}
          rate={lineItem.rate}
          qty={lineItem.qty}
          updateFn={this.updateLineItem}
          delFn={this.deleteLineItem}
        />
      );
    }

    if (maxIdx === 0 || (idx === maxIdx && this.state.showNew)) {
      return (
        <LineItem
          key={idx}
          idx={idx}
          updateFn={this.updateLineItem}
          delFn={this.deleteLineItem}
        />
      );
    }

    return undefined;
  }

  render() {
    return (
      <div
        className="lineItems"
        onMouseOver={this.showNew}
        onMouseOut={this.hideNew}
      >
        <span className="item heading">Item</span>
        <span className="rate heading">Rate($)</span>
        <span className="qty heading">Qty</span>
        <span className="total heading">Total($)</span>
        {
          this.state.lineItems.map(this.emitLineItem)
        }
        <Totals lineItems={this.state.lineItems} />
      </div>
    );
  }

}

class LineItem extends React.Component {

  static get propTypes() {
    return {
      item: React.PropTypes.string,
      rate: React.PropTypes.number,
      qty: React.PropTypes.number,
      updateFn: React.PropTypes.func,
      delFn: React.PropTypes.func,
      idx: React.PropTypes.number,
    };
  }

  static get defaultProps() {
    return {
      item: '',
      rate: 0,
      qty: 0,
      idx: 0,
      updateFn: undefined,
      delFn: undefined,
    };
  }

  constructor(props) {
    super(props);
    this.state = { showX: false };

    this.showX = this.showX.bind(this);
    this.hideX = this.hideX.bind(this);
    this.handleItemChange = this.handleItemChange.bind(this);
    this.handleRateChange = this.handleRateChange.bind(this);
    this.handleQtyChange = this.handleQtyChange.bind(this);
    this.deleteRow = this.deleteRow.bind(this);
  }

  handleItemChange(e) {
    this.props.updateFn(this.props.idx, 'item', e.target.value);
  }

  handleRateChange(e) {
    this.props.updateFn(this.props.idx, 'rate', parseFloat(e.target.value));
  }

  handleQtyChange(e) {
    this.props.updateFn(this.props.idx, 'qty', parseFloat(e.target.value));
  }

  deleteRow() {
    this.props.delFn(this.props.idx);
  }

  showX() {
    this.setState({ showX: true });
  }

  hideX(e) {
    const ele = e.toTarget || e.relatedTarget;
    if (!ele || ele.className.indexOf('delRow') >= 0) {
      return;
    }

    this.setState({ showX: false });
  }

  render() {
    return (
      <div
        className="lineItem"
        onMouseOver={this.showX}
        onMouseOut={this.hideX}
      >
        <input
          type="text"
          className="liData item"
          placeholder="New item"
          value={this.props.item}
          onChange={this.handleItemChange}
        />
        <input
          type="text"
          className="liData rate"
          placeholder="0.00"
          value={this.props.rate}
          onChange={this.handleRateChange}
        />
        <input
          type="text"
          className="liData qty"
          placeholder="0.0"
          value={this.props.qty}
          onChange={this.handleQtyChange}
        />
        <span className="liData total" >{ this.props.qty * this.props.rate }</span>
        {
          this.state.showX ? <button className="delRow" onClick={this.deleteRow}>X</button>
                           : null
        }
      </div>
    );
  }
}

class Totals extends React.Component {

  static get defaultProps() {
    return {
      lineItems: [],
    };
  }

  static get propTypes() {
    return {
      lineItems: React.PropTypes.array,
    };
  }

  static zeroDef(val) {
    if (!val || isNaN(val)) {
      return 0;
    }

    return val;
  }

  constructor(props) {
    super(props);
    this.state = { tax: 0 };

    this.calcSubTotal = this.calcSubTotal.bind(this);
    this.handleTaxChange = this.handleTaxChange.bind(this);
  }

  calcSubTotal() {
    let lsub = 0;

    for (let i = 0; i < this.props.lineItems.length; i += 1) {
      lsub += (Totals.zeroDef(this.props.lineItems[i].rate) *
                Totals.zeroDef(this.props.lineItems[i].qty));
    }

    return lsub;
  }

  handleTaxChange(e) {
    this.setState({ tax: e.target.value });
  }

  render() {
    return (
      <div className="totals">
        <div className="totalLabel">Sub-total:</div>
        <span className="subtotal totalValue numeric">{this.calcSubTotal()}</span>

        <div className="totalLabel">Tax:</div>
        <input
          className="tax numeric"
          type="text"
          placeholder="0.0"
          onChange={this.handleTaxChange}
        />
        <span>%</span>

        <div className="totalLabel finalTotal">Total:</div>
        <span className="totalValue finalTotal numeric">{
          parseFloat(this.calcSubTotal() + (this.calcSubTotal() * (this.state.tax / 100))) }
        </span>
      </div>
    );
  }
}

const PayeeContact = function payeeContact() {
  return (
    <div className="payeeContact">
      <input type="text" placeholder="Address 1" />
      <input type="text" placeholder="Address 2" />
      <input type="text" placeholder="+5 (5)5 5555 5555" />
      <input type="text" placeholder="www.example.com" />
      <input type="text" placeholder="freelancer@example.com" />
    </div>
  );
};

const ThankyouNote = function thankyouNote() {
  return (
    <div className="thankyouNote">
      Thankyou!
      <div>We appreciate your business and it&#39;s</div>
      <div>been a pleasure working with you.</div>
    </div>
  );
};

const Footer = function footr() {
  return (
    <div className="footer">
      <PayeeContact />
      <ThankyouNote />
    </div>
  );
};

const Invoice = function invc() {
  return (
    <div className="invoice">
      <InvoiceIdentity />
      <InvoiceMeta />
      <PaymentInfo />
      <ClientInfo />
      <LineItems />
      <Footer />
    </div>
  );
};

ReactDOM.render(
  <Invoice />,
  document.getElementById('content'),
);
